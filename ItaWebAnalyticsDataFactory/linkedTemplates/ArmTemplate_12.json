{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ItaWebAnalyticsDataFactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ExtractQualityAssuranceDatasets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExtractContentGroups",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.links.next.href"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "[['group_name']"
										},
										"sink": {
											"name": "group_name",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['items']"
							}
						},
						"inputs": [
							{
								"referenceName": "ContentGroupsRestDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ContentGroupsCsvDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ExecuteExtractQualityAssuranceInventoryMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractContentGroups",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractQualityAssuranceInventoryMetrics",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecuteTransformQualityAssuranceInventoryMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteExtractQualityAssuranceInventoryMetrics",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "TransformQualityAssuranceInventoryMetrics",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecuteExtractQualityAssuranceSummaryMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractContentGroups",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractQualityAssuranceSummaryMetrics",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"folder": {
					"name": "quality_assurance"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractVisitorDetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetWhoIsVisitingToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{pipeline().globalParameters.WhoIsVisitingTokenSecretIdentifierURL}?api-version=7.0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "LookupInitialVisitorIdNotInVisitorDetails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT DISTINCT(s.visitor_id) as visitorId FROM web_analytics.visitor_sessions s\nWHERE s.visitor_id NOT IN (SELECT d.id FROM web_analytics.visitor_details d)\nORDER BY 1\nOFFSET 0 ROWS\nFETCH NEXT @{variables('fetchRowCount')} ROWS ONLY",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Until VisitorIds is empty",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set visitorIds",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "GetWhoIsVisitingToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(variables('visitorIds'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set tempOffset",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ExecuteExtractVisitorDetailsByVisitorIds",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "tempOffset",
										"value": {
											"value": "@string(add(int(variables('offset')), int(variables('fetchRowCount'))))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set offset",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set tempOffset",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "offset",
										"value": {
											"value": "@variables('tempOffset')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LookupNextVisitorIdNotInVisitorDetails",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set offset",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT DISTINCT(s.visitor_id) as visitorId FROM web_analytics.visitor_sessions s\nWHERE s.visitor_id NOT IN (SELECT d.id FROM web_analytics.visitor_details d)\nORDER BY 1\nOFFSET @{variables('offset')} ROWS\nFETCH NEXT @{variables('fetchRowCount')} ROWS ONLY",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabaseDataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "re-set visitorIds",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "LookupNextVisitorIdNotInVisitorDetails",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "visitorIds",
										"value": {
											"value": "@activity('LookupNextVisitorIdNotInVisitorDetails').output.value",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecuteExtractVisitorDetailsByVisitorIds",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractVisitorDetailsByVisitorIds",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"VisitorIds": {
												"value": "@variables('visitorIds')",
												"type": "Expression"
											},
											"WhoIsVisitingToken": {
												"value": "@activity('GetWhoIsVisitingToken').output.value",
												"type": "Expression"
											},
											"Period": {
												"value": "@pipeline().parameters.Period",
												"type": "Expression"
											}
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Set visitorIds",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupInitialVisitorIdNotInVisitorDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "visitorIds",
							"value": {
								"value": "@activity('LookupInitialVisitorIdNotInVisitorDetails').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"Period": {
						"type": "string"
					}
				},
				"variables": {
					"offset": {
						"type": "String",
						"defaultValue": "0"
					},
					"visitorIds": {
						"type": "Array"
					},
					"tempOffset": {
						"type": "String",
						"defaultValue": "0"
					},
					"fetchRowCount": {
						"type": "String",
						"defaultValue": "5000"
					}
				},
				"folder": {
					"name": "wiv"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RebuildAnalyticsHistoricalMetricsByGroupIdDateRangePeriods')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DateRangePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GroupIdFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.DateRangePeriods",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "ExtractByGroupIdPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsHistoricalMetricsByGroupIdPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"GroupId": {
												"value": "@pipeline().parameters.GroupId",
												"type": "Expression"
											},
											"Period": {
												"value": "@item().date_range_period",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "GroupIdFolder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AnalyticsHistoricalMetricsByGroupIdFolderDataset",
								"type": "DatasetReference",
								"parameters": {
									"GroupId": {
										"value": "@pipeline().parameters.GroupId",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "GroupIdFolderExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GroupIdFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GroupIdFolder').output.exists, true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteGroupIdFolder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AnalyticsHistoricalMetricsByGroupIdFolderDataset",
											"type": "DatasetReference",
											"parameters": {
												"GroupId": {
													"value": "@pipeline().parameters.GroupId",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"GroupId": {
						"type": "string"
					},
					"DateRangePeriods": {
						"type": "array"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RebuildAnalyticsTrafficSourcesMetricsByGroupIdDateRangePeriods')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DateRangePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GroupIdFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.DateRangePeriods",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "ExtractByGroupIdPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsTrafficSourcesMetricsByGroupIdPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"GroupId": {
												"value": "@pipeline().parameters.GroupId",
												"type": "Expression"
											},
											"Period": {
												"value": "@item().date_range_period",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "GroupIdFolder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AnalyticsTrafficSourcesMetricsByGroupIdFolderDataset",
								"type": "DatasetReference",
								"parameters": {
									"GroupId": {
										"value": "@pipeline().parameters.GroupId",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "GroupIdFolderExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GroupIdFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GroupIdFolder').output.exists, true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteGroupIdFolder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AnalyticsTrafficSourcesMetricsByGroupIdFolderDataset",
											"type": "DatasetReference",
											"parameters": {
												"GroupId": {
													"value": "@pipeline().parameters.GroupId",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"GroupId": {
						"type": "string"
					},
					"DateRangePeriods": {
						"type": "array"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RebuildMonthlyAnalyticsExternalReferringDomainMetricsByGroupIdDateRangePeriods')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DateRangePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GroupIdFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.DateRangePeriods",
								"type": "Expression"
							},
							"batchCount": 30,
							"activities": [
								{
									"name": "ExtractByGroupIdPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractMonthlyAnalyticsExternalReferringDomainMetricsByGroupIdPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"GroupId": {
												"value": "@pipeline().parameters.GroupId",
												"type": "Expression"
											},
											"Period": {
												"value": "@item().date_range_period",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "GroupIdFolder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "MonthlyAnalyticsExternalReferringDomainMetricsByGroupIdFolderDataset",
								"type": "DatasetReference",
								"parameters": {
									"GroupId": {
										"value": "@pipeline().parameters.GroupId",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "GroupIdFolderExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GroupIdFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GroupIdFolder').output.exists, true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteGroupIdFolder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "MonthlyAnalyticsExternalReferringDomainMetricsByGroupIdFolderDataset",
											"type": "DatasetReference",
											"parameters": {
												"GroupId": {
													"value": "@pipeline().parameters.GroupId",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"GroupId": {
						"type": "string"
					},
					"DateRangePeriods": {
						"type": "array"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RebuildMonthlyAnalyticsOutboundLinkMetricsByGroupIdDateRangePeriods')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DateRangePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GroupIdFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.DateRangePeriods",
								"type": "Expression"
							},
							"batchCount": 30,
							"activities": [
								{
									"name": "ExtractByGroupIdPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractMonthlyAnalyticsOutboundLinkMetricsByGroupIdPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"GroupId": {
												"value": "@pipeline().parameters.GroupId",
												"type": "Expression"
											},
											"Period": {
												"value": "@item().date_range_period",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "GroupIdFolder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "MonthlyAnalyticsOutboundLinkMetricsByGroupIdFolderDataset",
								"type": "DatasetReference",
								"parameters": {
									"GroupId": {
										"value": "@pipeline().parameters.GroupId",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "GroupIdFolderExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GroupIdFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GroupIdFolder').output.exists, true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteGroupIdFolder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "MonthlyAnalyticsOutboundLinkMetricsByGroupIdFolderDataset",
											"type": "DatasetReference",
											"parameters": {
												"GroupId": {
													"value": "@pipeline().parameters.GroupId",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"GroupId": {
						"type": "string"
					},
					"DateRangePeriods": {
						"type": "array"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RefreshAnalyticsGroupsAnalyticsPages')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GenerateDateRangePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[web_analytics].[generate_date_range_periods]",
								"storedProcedureParameters": {
									"end_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EndDate",
											"type": "Expression"
										}
									},
									"start_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StartDate",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DateRangePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GenerateDateRangePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "RawFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupAnalyticsGroups",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "StagingFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GenerateDateRangePeriods').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ExtractAnalyticsGroupsAnalyticsPagesByGroupsPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsGroupsAnalyticsPagesByGroupsPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@{item().date_range_period}",
												"type": "Expression"
											},
											"AnalyticsGroups": {
												"value": "@activity('LookupAnalyticsGroups').output.value",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "RawFolder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AnalyticsGroupsAnalyticsPagesStageFolderCsvDataset",
								"type": "DatasetReference",
								"parameters": {
									"Stage": "raw"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "RawFolderExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "RawFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('RawFolder').output.exists, true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteRawFolder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AnalyticsGroupsAnalyticsPagesStageFolderCsvDataset",
											"type": "DatasetReference",
											"parameters": {
												"Stage": "raw"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "LookupAnalyticsGroups",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "AnalyticsGroupsCsvDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "StagingFolder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AnalyticsGroupsAnalyticsPagesStageFolderCsvDataset",
								"type": "DatasetReference",
								"parameters": {
									"Stage": "staging"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "StagingFolderExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "StagingFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('StagingFolder').output.exists, true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteStagingFolder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AnalyticsGroupsAnalyticsPagesStageFolderCsvDataset",
											"type": "DatasetReference",
											"parameters": {
												"Stage": "staging"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "PostProcessAnalyticsGroupsAnalyticsPages",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DateRangePeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PostProcessAnalyticsGroupsAnalyticsPages",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"parameters": {
					"StartDate": {
						"type": "string"
					},
					"EndDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResetAnalyticsGroupsAnalyticsPagesByGroupsPeriods')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RawFolder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AnalyticsGroupsAnalyticsPagesStageFolderCsvDataset",
								"type": "DatasetReference",
								"parameters": {
									"Stage": "raw"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "RawFolderExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "RawFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('RawFolder').output.exists, true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteRawFolder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AnalyticsGroupsAnalyticsPagesStageFolderCsvDataset",
											"type": "DatasetReference",
											"parameters": {
												"Stage": "raw"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "ConsolidatedFolder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "RawFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AnalyticsGroupsAnalyticsPagesStageFolderCsvDataset",
								"type": "DatasetReference",
								"parameters": {
									"Stage": "staging"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ConsolidatedFolderExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ConsolidatedFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('ConsolidatedFolder').output.exists, true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyConsolidatedToRaw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false,
												"prefix": "analytics_groups_analytics_pages/consolidated/"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "RootFolderDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AnalyticsGroupsAnalyticsPagesStageFolderCsvDataset",
											"type": "DatasetReference",
											"parameters": {
												"Stage": "raw"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "StagingFolder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AnalyticsGroupsAnalyticsPagesStageFolderCsvDataset",
								"type": "DatasetReference",
								"parameters": {
									"Stage": "raw"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "StagingFolderExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "StagingFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('StagingFolder').output.exists, true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteStagingFolder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AnalyticsGroupsAnalyticsPagesStageFolderCsvDataset",
											"type": "DatasetReference",
											"parameters": {
												"Stage": "staging"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "AnalyticsGroup",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ConsolidatedFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.AnalyticsGroups",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "AnalyticsGroupsAnalyticsPagesRawByGroupId",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "Set analyticsGroupId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AnalyticsGroupsAnalyticsPagesStageCsvDataset",
											"type": "DatasetReference",
											"parameters": {
												"AnalyticsGroupId": {
													"value": "@variables('analyticsGroupId')",
													"type": "Expression"
												},
												"Stage": "raw"
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Set analyticsGroupId",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "analyticsGroupId",
										"value": {
											"value": "@item().id",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AnalyticsGroupsAnalyticsPagesRawByGroupIdExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "AnalyticsGroupsAnalyticsPagesRawByGroupId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('AnalyticsGroupsAnalyticsPagesRawByGroupId').output.exists, true)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "DeleteAnalyticsGroupsAnalyticsPagesRawByGroupId",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "AnalyticsGroupsAnalyticsPagesStageCsvDataset",
														"type": "DatasetReference",
														"parameters": {
															"AnalyticsGroupId": {
																"value": "@variables('analyticsGroupId')",
																"type": "Expression"
															},
															"Stage": "raw"
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "DateRangePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "AnalyticsGroup",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "StagingFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.DateRangePeriods",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ExtractAnalyticsGroupsAnalyticsPagesByGroupsPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsGroupsAnalyticsPagesByGroupsPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@{item().date_range_period}",
												"type": "Expression"
											},
											"AnalyticsGroups": {
												"value": "@pipeline().parameters.AnalyticsGroups",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "PostProcessAnalyticsGroupsAnalyticsPages",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DateRangePeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PostProcessAnalyticsGroupsAnalyticsPages",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"parameters": {
					"AnalyticsGroups": {
						"type": "array"
					},
					"DateRangePeriods": {
						"type": "array"
					}
				},
				"variables": {
					"analyticsGroupId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransformAnalyticsBrowsersMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDateRangePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "date_range_periods.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "RootFolderDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DateRangePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDateRangePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDateRangePeriods').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExecuteTransformAnalyticsBrowsersByPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "TransformAnalyticsBrowsersMetricsByPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@{item().date_range_period}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractAnalyticsBrowsersMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDateRangePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "date_range_periods.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "RootFolderDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DateRangePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDateRangePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDateRangePeriods').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExecuteExtractAnalyticsBrowsersMetricsByPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsBrowsersMetricsByPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@{item().date_range_period}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractAnalyticsDatasetsByDateRangePeriod')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteExtractAnalyticsBrowsersMetricsByPeriod",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsBrowsersMetricsByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DateRangePeriod",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteTransformAnalyticsBrowsersByPeriod",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteExtractAnalyticsBrowsersMetricsByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "TransformAnalyticsBrowsersMetricsByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DateRangePeriod",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteExtractAnalyticsHistoricalMetricsByPeriod",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteExtractAnalyticsBrowsersMetricsByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsHistoricalMetricsByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DateRangePeriod",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteExtractAnalyticsTrafficSourcesMetricsByPeriod",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteExtractAnalyticsHistoricalMetricsByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsTrafficSourcesMetricsByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DateRangePeriod",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteExtractAnalyticsVisitLengthMetricsByPeriod",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteExtractAnalyticsTrafficSourcesMetricsByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsVisitLengthMetricsByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DateRangePeriod",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteExtractMonthlyAnalyticsHistoricalMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteExtractAnalyticsVisitLengthMetricsByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractMonthlyAnalyticsHistoricalMetrics",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecuteExtractMonthlyAnalyticsOutboundLinkMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteExtractMonthlyAnalyticsHistoricalMetrics",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractMonthlyAnalyticsOutboundLinkMetricsByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DateRangePeriod",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExtractMonthlyAnalyticsExternalReferringDomainMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteExtractMonthlyAnalyticsOutboundLinkMetrics",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractMonthlyAnalyticsExternalReferringDomainMetricsByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DateRangePeriod",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"DateRangePeriod": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractAnalyticsVisitLengthMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDateRangePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "date_range_periods.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "RootFolderDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DateRangePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDateRangePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDateRangePeriods').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExecuteExtractAnalyticsVisitLengthMetricsByPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsVisitLengthMetricsByPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@{item().date_range_period}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractMonthlyRefreshAnalyticsDatasets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExtractAnalyticsHistoricalMetricsByPeriod",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsHistoricalMetricsByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DateRangePeriod",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteExtractAnalyticsTrafficSourcesMetricsByPeriod",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractAnalyticsHistoricalMetricsByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsTrafficSourcesMetricsByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DateRangePeriod",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExtractMonthlyAnalyticsOutboundLinkMetricsByPeriod",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteExtractAnalyticsTrafficSourcesMetricsByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractMonthlyAnalyticsOutboundLinkMetricsByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DateRangePeriod",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExtractMonthlyAnalyticsExternalReferringDomainMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractMonthlyAnalyticsOutboundLinkMetricsByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractMonthlyAnalyticsExternalReferringDomainMetricsByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DateRangePeriod",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"DateRangePeriod": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RebuildAnalyticsDatasetsByGroupIdStartDate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GenerateDatePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[web_analytics].[generate_date_periods]",
								"storedProcedureParameters": {
									"startDate": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StartDate",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GenerateDateRangePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[web_analytics].[generate_date_range_periods]",
								"storedProcedureParameters": {
									"start_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StartDate",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RebuildAnalyticsHistoricalMetricsByGroupIdPeriods",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GenerateDateRangePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RebuildAnalyticsHistoricalMetricsByGroupIdDateRangePeriods",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"GroupId": {
									"value": "@pipeline().parameters.GroupId",
									"type": "Expression"
								},
								"DateRangePeriods": {
									"value": "@activity('GenerateDateRangePeriods').output.value",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "RebuildAnalyticsTrafficSourcesByGroupIdPeriods",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "RebuildAnalyticsHistoricalMetricsByGroupIdPeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RebuildAnalyticsTrafficSourcesMetricsByGroupIdDateRangePeriods",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"GroupId": {
									"value": "@pipeline().parameters.GroupId",
									"type": "Expression"
								},
								"DateRangePeriods": {
									"value": "@activity('GenerateDateRangePeriods').output.value",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "RebuildMonthlyAnalyticsOutboundLinkMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "RebuildAnalyticsTrafficSourcesByGroupIdPeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RebuildMonthlyAnalyticsOutboundLinkMetricsByGroupIdDateRangePeriods",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"GroupId": {
									"value": "@pipeline().parameters.GroupId",
									"type": "Expression"
								},
								"DateRangePeriods": {
									"value": "@activity('GenerateDateRangePeriods').output.value",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "RebuildMonthlyExternalReferringDomainMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "RebuildMonthlyAnalyticsOutboundLinkMetrics",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RebuildMonthlyAnalyticsExternalReferringDomainMetricsByGroupIdDateRangePeriods",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"GroupId": {
									"value": "@pipeline().parameters.GroupId",
									"type": "Expression"
								},
								"DateRangePeriods": {
									"value": "@activity('GenerateDateRangePeriods').output.value",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"GroupId": {
						"type": "string"
					},
					"StartDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/RebuildAnalyticsHistoricalMetricsByGroupIdDateRangePeriods')]",
				"[concat(variables('factoryId'), '/pipelines/RebuildAnalyticsTrafficSourcesMetricsByGroupIdDateRangePeriods')]",
				"[concat(variables('factoryId'), '/pipelines/RebuildMonthlyAnalyticsOutboundLinkMetricsByGroupIdDateRangePeriods')]",
				"[concat(variables('factoryId'), '/pipelines/RebuildMonthlyAnalyticsExternalReferringDomainMetricsByGroupIdDateRangePeriods')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RebuildAnalyticsHistoricalMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GenerateDateRangePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[web_analytics].[generate_date_range_periods]",
								"storedProcedureParameters": {
									"end_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EndDate",
											"type": "Expression"
										}
									},
									"start_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StartDate",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DateRangePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GenerateDateRangePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GenerateDateRangePeriods').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExtractAnalyticsHistoricalMetricsByPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsHistoricalMetricsByPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@{item().date_range_period}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"StartDate": {
						"type": "string"
					},
					"EndDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RebuildAnalyticsTrafficSourcesMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GenerateDateRangePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[web_analytics].[generate_date_range_periods]",
								"storedProcedureParameters": {
									"end_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EndDate",
											"type": "Expression"
										}
									},
									"start_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StartDate",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DateRangePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GenerateDateRangePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GenerateDateRangePeriods').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExtractAnalyticsTrafficSourcesMetricsByPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsTrafficSourcesMetricsByPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@{item().date_range_period}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"StartDate": {
						"type": "string"
					},
					"EndDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RebuildMonthlyAnalyticsExternalReferringDomainMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GenerateDateRangePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[web_analytics].[generate_date_range_periods]",
								"storedProcedureParameters": {
									"end_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EndDate",
											"type": "Expression"
										}
									},
									"start_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StartDate",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DateRangePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GenerateDateRangePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GenerateDateRangePeriods').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExtractByPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractMonthlyAnalyticsExternalReferringDomainMetricsByPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@{item().date_range_period}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"StartDate": {
						"type": "string"
					},
					"EndDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RebuildMonthlyAnalyticsOutboundLinkMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GenerateDateRangePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[web_analytics].[generate_date_range_periods]",
								"storedProcedureParameters": {
									"end_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EndDate",
											"type": "Expression"
										}
									},
									"start_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StartDate",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DateRangePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GenerateDateRangePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GenerateDateRangePeriods').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExtractMonthlyAnalyticsOutboundLinkMetricsByPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractMonthlyAnalyticsOutboundLinkMetricsByPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@{item().date_range_period}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"StartDate": {
						"type": "string"
					},
					"EndDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RefreshAnalyticsCountryMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadAnalyticsCountryMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractAnalyticsCountryMetrics",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LoadAnalyticsCountryMetrics",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExtractAnalyticsCountryMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsCountryMetrics",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"StartDate": {
									"value": "@pipeline().parameters.StartDate",
									"type": "Expression"
								},
								"EndDate": {
									"value": "@pipeline().parameters.EndDate",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"StartDate": {
						"type": "string"
					},
					"EndDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RefreshAnalyticsRegionMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadAnalyticsRegionMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractAnalyticsRegionMetrics",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LoadAnalyticsRegionMetrics",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExtractAnalyticsRegionMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsRegionMetrics",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"StartDate": {
									"value": "@pipeline().parameters.StartDate",
									"type": "Expression"
								},
								"EndDate": {
									"value": "@pipeline().parameters.EndDate",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"StartDate": {
						"type": "string"
					},
					"EndDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}