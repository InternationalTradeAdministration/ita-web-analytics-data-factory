{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ItaWebAnalyticsDataFactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ExtractQualityAssuranceSummaryMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Prevent Delete from failing when folder is empty",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ContentGroupsCsvDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "QualityAssuranceSummaryMetricsCsvDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "filler.csv"
								}
							}
						]
					},
					{
						"name": "Delete Folder",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Prevent Delete from failing when folder is empty",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "QualityAssuranceSummaryMetricsFolderDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "ExtractWithoutGroupId",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "content_group_id",
										"value": "1"
									}
								],
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['broken_links']"
										},
										"sink": {
											"name": "broken_links",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['broken_links_delta']"
										},
										"sink": {
											"name": "broken_links_delta",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['clicks_on_broken_links']"
										},
										"sink": {
											"name": "clicks_on_broken_links",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['misspellings']"
										},
										"sink": {
											"name": "misspellings",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['misspellings_delta']"
										},
										"sink": {
											"name": "misspellings_delta",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['pages']"
										},
										"sink": {
											"name": "pages",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['pages_affected_by_broken_links']"
										},
										"sink": {
											"name": "pages_affected_by_broken_links",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['pages_affected_by_misspellings']"
										},
										"sink": {
											"name": "pages_affected_by_misspellings",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['potential_misspellings']"
										},
										"sink": {
											"name": "potential_misspellings",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['content_group_id']"
										},
										"sink": {
											"name": "content_group_id",
											"type": "Int64"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "QualityAssuranceSummaryMetricsRestDataset",
								"type": "DatasetReference",
								"parameters": {
									"QueryString": "page=1&page_size=1000"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "QualityAssuranceSummaryMetricsCsvDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "content_group_1.csv"
								}
							}
						]
					},
					{
						"name": "ExtractByGroupId",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractWithoutGroupId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractQualityAssuranceSummaryMetricsByGroupId",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"folder": {
					"name": "quality_assurance"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractVisitorDetailsByVisitorIds')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachVisitorId",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.VisitorIds",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExecuteExtractVisitorDetailByParameter",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractVisitorDetailByParameters",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Token": {
												"value": "@pipeline().parameters.WhoIsVisitingToken",
												"type": "Expression"
											},
											"VisitorId": {
												"value": "@item().visitorId",
												"type": "Expression"
											},
											"Period": {
												"value": "@pipeline().parameters.Period",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"VisitorIds": {
						"type": "array"
					},
					"WhoIsVisitingToken": {
						"type": "string"
					},
					"Period": {
						"type": "string"
					}
				},
				"folder": {
					"name": "wiv"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractVisitorFeed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteExtractFirstPageOfVisitorFeed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetWhoIsVisitingToken",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If VisitorFeedByDateRangeFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If DateFrom and DateTo are equals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractVisitorFeedByParameters",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DateFrom": {
									"value": "@pipeline().parameters.DateFrom",
									"type": "Expression"
								},
								"DateTo": {
									"value": "@pipeline().parameters.DateTo",
									"type": "Expression"
								},
								"Page": "1",
								"Token": {
									"value": "@activity('GetWhoIsVisitingToken').output.value",
									"type": "Expression"
								},
								"Folder": {
									"value": "@variables('folder')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LookupFirstPageResponse",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ExecuteExtractFirstPageOfVisitorFeed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "WivVisitorFeedJsonDataset",
								"type": "DatasetReference",
								"parameters": {
									"Page": "1",
									"Folder": {
										"value": "@variables('folder')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachPage",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupFirstPageResponse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,activity('LookupFirstPageResponse').output.value[0].pagination.pagesCount)",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExecuteExtractVisitorFeedByParameters",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractVisitorFeedByParameters",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DateFrom": {
												"value": "@pipeline().parameters.DateFrom",
												"type": "Expression"
											},
											"DateTo": {
												"value": "@pipeline().parameters.DateTo",
												"type": "Expression"
											},
											"Page": {
												"value": "@item()",
												"type": "Expression"
											},
											"Token": {
												"value": "@activity('GetWhoIsVisitingToken').output.value",
												"type": "Expression"
											},
											"Folder": {
												"value": "@variables('folder')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "GetWhoIsVisitingToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{pipeline().globalParameters.WhoIsVisitingTokenSecretIdentifierURL}?api-version=7.0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "GetVisitorFeedByDateRangeJsonFolderMetadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "If DateFrom and DateTo are equals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "WivVisitorFeedByDateRangeJsonFolderDataset",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@variables('folder')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If VisitorFeedByDateRangeFolderExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetVisitorFeedByDateRangeJsonFolderMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('GetVisitorFeedByDateRangeJsonFolderMetadata').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteVisitorFeedByDateRangeJsonFolder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "WivVisitorFeedByDateRangeJsonFolderDataset",
											"type": "DatasetReference",
											"parameters": {
												"Folder": {
													"value": "@variables('folder')",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "If DateFrom and DateTo are equals",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.DateFrom, pipeline().parameters.DateTo)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set folder to DateFrom_DateTo",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "folder",
										"value": {
											"value": "@{pipeline().parameters.DateFrom}_@{pipeline().parameters.DateTo}",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set folder to DateFrom",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "folder",
										"value": {
											"value": "@pipeline().parameters.DateFrom",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"DateFrom": {
						"type": "string"
					},
					"DateTo": {
						"type": "string"
					}
				},
				"variables": {
					"folder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "wiv"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PostProcessAnalyticsGroupsAnalyticsPages')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DedupAnalyticsGroupsAnalyticsPages",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DedupAnalyticsGroupsAnalyticsPages",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawAnalyticsGroupsAnalyticsPages": {
										"Stage": "raw"
									},
									"DedupedAnalyticsGroupsAnalyticsPages": {
										"Stage": "staging"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ConsolidatedFolder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "DedupAnalyticsGroupsAnalyticsPages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AnalyticsGroupsAnalyticsPagesStageFolderCsvDataset",
								"type": "DatasetReference",
								"parameters": {
									"Stage": "consolidated"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ConsolidatedFolderExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ConsolidatedFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('ConsolidatedFolder').output.exists, true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteConsolidatedFolder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AnalyticsGroupsAnalyticsPagesStageFolderCsvDataset",
											"type": "DatasetReference",
											"parameters": {
												"Stage": "consolidated"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "CopyFromStagingToConsolidated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ConsolidatedFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false,
									"prefix": "analytics_groups_analytics_pages/staging/"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RootFolderDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AnalyticsGroupsAnalyticsPagesStageFolderCsvDataset",
								"type": "DatasetReference",
								"parameters": {
									"Stage": "consolidated"
								}
							}
						]
					}
				],
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RebuildAnalyticsPages')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GenerateDateRangePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[web_analytics].[generate_date_range_periods]",
								"storedProcedureParameters": {
									"end_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EndDate",
											"type": "Expression"
										}
									},
									"start_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StartDate",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DateRangePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GenerateDateRangePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GenerateDateRangePeriods').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExtractAnalyticsPagesByPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsPagesByPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@{item().date_range_period}",
												"type": "Expression"
											},
											"FileNamePrefix": {
												"value": "@{item().date_range_period}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "DedupAnalyticsPages",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DateRangePeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DedupAnalyticsPages",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AnalyticsPages": {},
									"DedupedAnalyticsPages": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"parameters": {
					"StartDate": {
						"type": "string"
					},
					"EndDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RefreshAnalyticsCountryMetricsByGroupId')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GenerateDatePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[web_analytics].[generate_date_periods]",
								"storedProcedureParameters": {
									"initial_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StartDate",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DatePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GenerateDatePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GenerateDatePeriods').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ExtractAnalyticsCountryMetricsByGroupIdPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsCountryMetricsByGroupIdPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@item().date_period",
												"type": "Expression"
											},
											"AnalyticsGroupId": {
												"value": "@pipeline().parameters.AnalyticsGroupId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "LoadAnalyticsCountryMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DatePeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LoadAnalyticsCountryMetrics",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"StartDate": {
						"type": "string",
						"defaultValue": "20200203"
					},
					"AnalyticsGroupId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RefreshAnalyticsRegionMetricsByGroupId')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GenerateDatePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[web_analytics].[generate_date_periods]",
								"storedProcedureParameters": {
									"initial_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StartDate",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DatePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GenerateDatePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GenerateDatePeriods').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ExtractAnalyticsRegionMetricsByGroupIdPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsRegionMetricsByGroupIdPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@item().date_period",
												"type": "Expression"
											},
											"AnalyticsGroupId": {
												"value": "@pipeline().parameters.AnalyticsGroupId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "LoadAnalyticsRegionMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DatePeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LoadAnalyticsRegionMetrics",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"StartDate": {
						"type": "string",
						"defaultValue": "20200203"
					},
					"AnalyticsGroupId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransformAnalyticsBrowsersMetricsByPeriod')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UnpivotRawAnalyticsBrowsersMetrics",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "UnpivotRawAnalyticsBrowsersMetrics",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawAnalyticsBrowsersMetrics": {
										"Period": {
											"value": "@{pipeline().parameters.Period}",
											"type": "Expression"
										}
									},
									"SinkUnpivotedAnalyticsBrowsersMetrics": {
										"Period": {
											"value": "@{pipeline().parameters.Period}",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"parameters": {
					"Period": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransformQualityAssuranceInventoryMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UnpivotQualityAssuranceInventoryMetrics",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "UnpivotQualityAssuranceInventoryMetrics",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"JsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "quality_assurance"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractAnalyticsBrowsersMetricsByPeriod')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExtractByPeriod",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Period Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "analytics_group_id",
										"value": "1"
									},
									{
										"name": "analytics_filter_id",
										"value": "1"
									}
								],
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['data']['Chrome']"
										},
										"sink": {
											"name": "Chrome",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['data']['Chrome Mobile']"
										},
										"sink": {
											"name": "Chrome Mobile",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['data']['Edge']"
										},
										"sink": {
											"name": "Edge",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['data']['Safari']"
										},
										"sink": {
											"name": "Safari",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['data']['Mobile Safari']"
										},
										"sink": {
											"name": "Mobile Safari",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['data']['IE']"
										},
										"sink": {
											"name": "IE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['data']['IE Mobile']"
										},
										"sink": {
											"name": "IE Mobile",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['data']['Firefox']"
										},
										"sink": {
											"name": "Firefox",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['data']['Android Browser']"
										},
										"sink": {
											"name": "Android Browser",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['data']['Samsung Browser']"
										},
										"sink": {
											"name": "Samsung Browser",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['data']['Opera']"
										},
										"sink": {
											"name": "Opera",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['data']['Opera Mini']"
										},
										"sink": {
											"name": "Opera Mini",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['data']['Opera Mobile']"
										},
										"sink": {
											"name": "Opera Mobile",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['data']['Unknown  ']"
										},
										"sink": {
											"name": "Unknown",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['timestamp']"
										},
										"sink": {
											"name": "timestamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['analytics_group_id']"
										},
										"sink": {
											"name": "analytics_group_id",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['analytics_filter_id']"
										},
										"sink": {
											"name": "analytics_filter_id",
											"type": "Int64"
										}
									}
								],
								"collectionReference": "$['items']"
							}
						},
						"inputs": [
							{
								"referenceName": "AnalyticsBrowsersMetricsRestDataset",
								"type": "DatasetReference",
								"parameters": {
									"QueryString": {
										"value": "page=1&page_size=1000&period=@{pipeline().parameters.Period}",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AnalyticsBrowsersMetricsByPeriodRawCsvDataset",
								"type": "DatasetReference",
								"parameters": {
									"Period": {
										"value": "@{pipeline().parameters.Period}",
										"type": "Expression"
									},
									"FileName": {
										"value": "analytics_group_1_analytics_filter_1.csv",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ExtractByPeriodGroupId",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsBrowsersMetricsByGroupId",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@{pipeline().parameters.Period}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExtractByPeriodFilterId",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractByPeriodGroupId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsBrowsersMetricsByFilterId",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@{pipeline().parameters.Period}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete Period Folder",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Prevent Delete from failing when folder is empty",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AnalyticsBrowsersMetricsByPeriodRawFolderDataset",
								"type": "DatasetReference",
								"parameters": {
									"Period": {
										"value": "@{pipeline().parameters.Period}",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Prevent Delete from failing when folder is empty",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "AnalyticsGroupsCsvDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AnalyticsBrowsersMetricsByPeriodRawCsvDataset",
								"type": "DatasetReference",
								"parameters": {
									"Period": {
										"value": "@{pipeline().parameters.Period}",
										"type": "Expression"
									},
									"FileName": "filler.csv"
								}
							}
						]
					}
				],
				"concurrency": 1,
				"parameters": {
					"Period": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractAnalyticsCampaignNameMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDateRangePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DateRangePeriodsCsvDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DatePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDateRangePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDateRangePeriods').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "ExecuteExtractAnalyticsCampaignNameMetricsByPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsCampaignNameMetricsByPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@{item().date_range_period}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractAnalyticsCountryMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DatePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GenerateDatePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GenerateDatePeriods').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ExecuteExtractAnalyticsCountryMetricsByPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsCountryMetricsByPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@{item().date_period}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "GenerateDatePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[web_analytics].[generate_date_periods]",
								"storedProcedureParameters": {
									"endDate": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EndDate",
											"type": "Expression"
										}
									},
									"startDate": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StartDate",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"StartDate": {
						"type": "string"
					},
					"EndDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractAnalyticsHistoricalMetricsByPeriod')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupAnalyticsGroups",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "AnalyticsGroupsCsvDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "AnalyticsGroup",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupAnalyticsGroups",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ExtractByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupAnalyticsGroups').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "ExtractByGroupIdPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsHistoricalMetricsByGroupIdPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"GroupId": {
												"value": "@item().id",
												"type": "Expression"
											},
											"Period": {
												"value": "@pipeline().parameters.Period",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "LookupAnalyticsFilters",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "AnalyticsFiltersCsvDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "AnalyticsFilter",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "AnalyticsGroup",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupAnalyticsFilters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupAnalyticsFilters').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExtractByFilterIdPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsHistoricalMetricsByParameters",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"GroupId": "1",
											"FilterId": {
												"value": "@item().id",
												"type": "Expression"
											},
											"Period": {
												"value": "@pipeline().parameters.Period",
												"type": "Expression"
											},
											"QueryString": {
												"value": "filter_id=@{item().id}&period=@{pipeline().parameters.Period}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "ExtractByPeriod",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsHistoricalMetricsByParameters",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"GroupId": "1",
								"FilterId": "1",
								"Period": {
									"value": "@pipeline().parameters.Period",
									"type": "Expression"
								},
								"QueryString": {
									"value": "period=@{pipeline().parameters.Period}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"Period": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractAnalyticsRegionMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DatePeriod",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GenerateDatePeriods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GenerateDatePeriods').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ExecuteExtractAnalyticsRegionMetricsByPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsRegionMetricsByPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Period": {
												"value": "@{item().date_period}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "GenerateDatePeriods",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[web_analytics].[generate_date_periods]",
								"storedProcedureParameters": {
									"endDate": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EndDate",
											"type": "Expression"
										}
									},
									"startDate": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StartDate",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"StartDate": {
						"type": "string"
					},
					"EndDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractAnalyticsTrafficSourcesMetricsByPeriod')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupAnalyticsGroups",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "AnalyticsGroupsCsvDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "AnalyticsGroup",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupAnalyticsGroups",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ExtractByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupAnalyticsGroups').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "ExtractByGroupIdPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsTrafficSourcesMetricsByGroupIdPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"GroupId": {
												"value": "@item().id",
												"type": "Expression"
											},
											"Period": {
												"value": "@pipeline().parameters.Period",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "LookupAnalyticsFilters",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "AnalyticsFiltersCsvDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "AnalyticsFilter",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "AnalyticsGroup",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupAnalyticsFilters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupAnalyticsFilters').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExtractByFilterIdPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractAnalyticsTrafficSourcesMetricsByParameters",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"GroupId": "1",
											"FilterId": {
												"value": "@item().id",
												"type": "Expression"
											},
											"Period": {
												"value": "@pipeline().parameters.Period",
												"type": "Expression"
											},
											"QueryString": {
												"value": "filter_id=@{item().id}&period=@{pipeline().parameters.Period}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "ExtractByPeriod",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsTrafficSourcesMetricsByParameters",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"GroupId": "1",
								"FilterId": "1",
								"Period": {
									"value": "@pipeline().parameters.Period",
									"type": "Expression"
								},
								"QueryString": {
									"value": "period=@{pipeline().parameters.Period}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"Period": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractAnalyticsVisitLengthMetricsByPeriod')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExtractByPeriod",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Period Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "analytics_group_id",
										"value": "1"
									},
									{
										"name": "analytics_filter_id",
										"value": "1"
									}
								],
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['timestamp']"
										},
										"sink": {
											"name": "timestamp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['visit_duration_average_in_minutes']"
										},
										"sink": {
											"name": "visit_duration_average_in_minutes",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"path": "$['analytics_group_id']"
										},
										"sink": {
											"name": "analytics_group_id",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['analytics_filter_id']"
										},
										"sink": {
											"name": "analytics_filter_id",
											"type": "Int64"
										}
									}
								],
								"collectionReference": "$['items']"
							}
						},
						"inputs": [
							{
								"referenceName": "AnalyticsVisitLengthMetricsRestDataset",
								"type": "DatasetReference",
								"parameters": {
									"QueryString": {
										"value": "page=1&page_size=1000&period=@{pipeline().parameters.Period}",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AnalyticsVisitLengthMetricsByPeriodCsvDataset",
								"type": "DatasetReference",
								"parameters": {
									"Period": {
										"value": "@{pipeline().parameters.Period}",
										"type": "Expression"
									},
									"FileName": {
										"value": "analytics_group_1_analytics_filter_1.csv",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ExtractByPeriodGroupId",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsVisitLengthMetricsByGroupId",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@{pipeline().parameters.Period}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExtractByPeriodFilterId",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractByPeriodGroupId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsVisitLengthMetricsByFilterId",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@{pipeline().parameters.Period}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete Period Folder",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Prevent Delete from failing when folder is empty",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AnalyticsVisitLengthMetricsByPeriodFolderDataset",
								"type": "DatasetReference",
								"parameters": {
									"Period": {
										"value": "@{pipeline().parameters.Period}",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Prevent Delete from failing when folder is empty",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "AnalyticsGroupsCsvDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AnalyticsVisitLengthMetricsByPeriodCsvDataset",
								"type": "DatasetReference",
								"parameters": {
									"Period": {
										"value": "@{pipeline().parameters.Period}",
										"type": "Expression"
									},
									"FileName": "filler.csv"
								}
							}
						]
					}
				],
				"concurrency": 1,
				"parameters": {
					"Period": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractDailyRefreshAnalyticsDatasetsByDatePeriod')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteExtractAnalyticsCountryMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteExtractAnalyticsPageMetricsByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsCountryMetricsByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DatePeriod",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteExtractAnalyticsRegionMetrics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteExtractAnalyticsCountryMetrics",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsRegionMetricsByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DatePeriod",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteExtractAnalyticsPageMetricsByPeriod",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractAnalyticsGroupsAnalyticsPagesByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsPageMetricsByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DatePeriod",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExtractAnalyticsGroupsAnalyticsPagesByPeriod",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractAnalyticsGroupsAnalyticsPagesByPeriod",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Period": {
									"value": "@pipeline().parameters.DatePeriod",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PostProcessAnalyticsGroupsAnalyticsPages",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteExtractAnalyticsPageMetricsByPeriod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PostProcessAnalyticsGroupsAnalyticsPages",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"DatePeriod": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PostProcessAnalyticsGroupsAnalyticsPages')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractMonthlyAnalyticsExternalReferringDomainMetricsByPeriod')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupAnalyticsGroups",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "AnalyticsGroupsCsvDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "AnalyticsGroup",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupAnalyticsGroups",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupAnalyticsGroups').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExtractByGroupIdPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractMonthlyAnalyticsExternalReferringDomainMetricsByGroupIdPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"GroupId": {
												"value": "@item().id",
												"type": "Expression"
											},
											"Period": {
												"value": "@pipeline().parameters.Period",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "ExtractByPeriod",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractMonthlyAnalyticsExternalReferringDomainMetricsByParameters",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"GroupId": "1",
								"Period": {
									"value": "@pipeline().parameters.Period",
									"type": "Expression"
								},
								"QueryString": {
									"value": "period=@{pipeline().parameters.Period}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"Period": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractMonthlyAnalyticsHistoricalMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExtractByGroupId",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteExtractByParameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractMonthlyAnalyticsHistoricalMetricsByGroupId",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Data Folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "MonthlyAnalyticsHistoricalMetricsByPeriodFolderDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Data Folder exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Data Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Data Folder').output.exists, true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Data Folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "MonthlyAnalyticsHistoricalMetricsByPeriodFolderDataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "ExecuteExtractByParameters",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Data Folder exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractMonthlyAnalyticsHistoricalMetricsByParameters",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"AnalyticsGroupId": "1",
								"QueryString": {
									"value": "page=1&page_size=1000",
									"type": "Expression"
								}
							}
						}
					}
				],
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractMonthlyAnalyticsOutboundLinkMetricsByPeriod')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupAnalyticsGroups",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "AnalyticsGroupsCsvDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "AnalyticsGroup",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupAnalyticsGroups",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupAnalyticsGroups').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExtractByGroupIdPeriod",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExtractMonthlyAnalyticsOutboundLinkMetricsByGroupIdPeriod",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"GroupId": {
												"value": "@item().id",
												"type": "Expression"
											},
											"Period": {
												"value": "@pipeline().parameters.Period",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "ExtractByPeriod",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExtractMonthlyAnalyticsOutboundLinkMetricsByParameters",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"GroupId": "1",
								"Period": {
									"value": "@pipeline().parameters.Period",
									"type": "Expression"
								},
								"QueryString": {
									"value": "period=@{pipeline().parameters.Period}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"Period": {
						"type": "string"
					}
				},
				"folder": {
					"name": "analytics"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}